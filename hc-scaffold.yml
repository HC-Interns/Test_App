{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+06aba91",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # DNA File Version
    # Version indicator for changes to DNA
    "Version": 1,

    # DNA Unique ID
    # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
    "UUID": "6b5c92d6-79db-490b-bc34-bd30e4433a39",

    # Application Name
    # What would you like to call your holochain app?
    "Name": "Test_App",

    # Properties
    # Properties that you want available across all Zomes.
    "Properties": {

      # Application Description
      # Briefly describe your holochain app.
      "description": "Helps add crap to test",

      # Language
      # The base (human) language of this holochain app.
      "language": "en"
    },

    # Properties Schema File
    # Describes the entries in the Properties section of your dna file.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT Settings
    # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # Zomes
    # List the Zomes your application will support.
    "Zomes": [
      {

        # Zome Name
        # The name of this code module.
        "Name": "needs_backup",

        # Zome Description
        # What is the purpose of this module?
        "Description": "need to back up this zome",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "needs_backup.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "profile", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"$schema\": \"http://json-schema.org/draft-06/schema#\",\n  \"id\": \"http://example.com/needs_backup/profile.json\",\n  \"type\": \"object\",\n  \"required\": [\n    \"age\",\n    \"name\",\n    \"tags\"\n  ],\n  \"properties\": {\n    \"age\": {\n      \"maximum\": 120,\n      \"minimum\": 0,\n      \"default\": 0,\n      \"type\": \"integer\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"pattern\": \".+\"\n    },\n    \"tags\": {\n      \"default\": [\n        \"user\"\n      ],\n      \"items\": {\n        \"type\": \"string\",\n        \"pattern\": \".+\"\n      },\n      \"type\": \"array\"\n    }\n  }\n}",
            "_": "cr"
          },
          {
            "Name": "profile_string", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "string", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "cr"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "profileCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:profile"
          },
          {
            "Name": "profileRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:profile"
          },
          {
            "Name": "profile_stringCreate", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:profile_string"
          },
          {
            "Name": "profile_stringRead", # The name of this function.
            "CallingType": "string", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:profile_string"
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction profileCreate (profileEntry) {\n  var profileHash = commit(\"profile\", profileEntry);\n  return profileHash;\n}\n\nfunction profileRead (profileHash) {\n  var profile = get(profileHash);\n  return profile;\n}\n\nfunction profile_stringCreate (profile_stringEntry) {\n  var profile_stringHash = commit(\"profile_string\", profile_stringEntry);\n  return profile_stringHash;\n}\n\nfunction profile_stringRead (profile_stringHash) {\n  var profile_string = get(profile_stringHash);\n  return profile_string;\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"profile_string\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"profile_string\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"profile_string\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"profile_string\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"profile_string\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Auto-Generated test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "needs_backup",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for profileCreate",

            # Zome
            # The zome this test is related to
            "Zome": "needs_backup",

            # Function Name
            # The function to test
            "FnName": "profileCreate",

            # Input
            # Input sent to the function
            "Input": {
              "age": 0,
              "name": "a string",
              "tags": [
                "a string"
              ]
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for profileRead",

            # Zome
            # The zome this test is related to
            "Zome": "needs_backup",

            # Function Name
            # The function to test
            "FnName": "profileRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "age": 0,
              "name": "a string",
              "tags": [
                "a string"
              ]
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for profile_stringCreate",

            # Zome
            # The zome this test is related to
            "Zome": "needs_backup",

            # Function Name
            # The function to test
            "FnName": "profile_stringCreate",

            # Input
            # Input sent to the function
            "Input": "test",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for profile_stringRead",

            # Zome
            # The zome this test is related to
            "Zome": "needs_backup",

            # Function Name
            # The function to test
            "FnName": "profile_stringRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "test"
          }
        ]
      }
    }
  ]
}